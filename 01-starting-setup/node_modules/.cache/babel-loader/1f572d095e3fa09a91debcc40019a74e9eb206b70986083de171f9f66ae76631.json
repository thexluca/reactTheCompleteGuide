{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/Development/Udemy/reactTheCompleteGuide/section36_bonusOptoinal_reactStateAndWorkingWithEvents/01-starting-setup/src/components/Expenses/ExpenseItem.js\",\n  _s = $RefreshSig$();\nimport \"./ExpenseItem.css\";\nimport { useState } from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from '../UI/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseItem = props => {\n  _s();\n  // useState always returns an array with two elements.\n  // First array value - is a pointer to the managed value.\n  // Second array value - is the updating function to call and set a new value to the managed value.\n  // - Use javascript array destructuring to store elements in separate variables. ex:\n  const [title, setTitle] = useState(props.title);\n  const clickHandler = () => {\n    setTitle(\"Updated\"); // if you need to update title use the setTitle function.\n    console.log(title); // notice: this title will log 'old' title value because useState does not update the value right away. \n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickHandler,\n        children: \"Change Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseItem, \"ceUz0wjPP/oTY3+evv2xH5hljW4=\");\n_c = ExpenseItem;\nexport default ExpenseItem;\nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["useState","ExpenseDate","Card","jsxDEV","_jsxDEV","ExpenseItem","props","_s","title","setTitle","clickHandler","console","log","className","children","date","fileName","_jsxFileName","lineNumber","columnNumber","amount","onClick","_c","$RefreshReg$"],"sources":["/home/alex/Documents/Development/Udemy/reactTheCompleteGuide/section36_bonusOptoinal_reactStateAndWorkingWithEvents/01-starting-setup/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\nimport { useState } from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from '../UI/Card'; \n\nconst ExpenseItem = (props) => {\n\n  // useState always returns an array with two elements.\n  // First array value - is a pointer to the managed value.\n  // Second array value - is the updating function to call and set a new value to the managed value.\n  // - Use javascript array destructuring to store elements in separate variables. ex:\n  const [title, setTitle] = useState(props.title);\n\n  const clickHandler = () => {\n    setTitle( \"Updated\" ); // if you need to update title use the setTitle function.\n    console.log(title); // notice: this title will log 'old' title value because useState does not update the value right away. \n  }\n\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date}/>\n      <div className=\"expense-item__description\">\n        <h2>{title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n        <button onClick={ clickHandler }>Change Title</button>\n      </div>\n    </Card>\n  );\n}\n\nexport default ExpenseItem;\n"],"mappings":";;AAAA,OAAO,mBAAmB;AAC1B,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE7B;EACA;EACA;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACM,KAAK,CAACE,KAAK,CAAC;EAE/C,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBD,QAAQ,CAAE,SAAU,CAAC,CAAC,CAAC;IACvBE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED,oBACEJ,OAAA,CAACF,IAAI;IAACW,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC5BV,OAAA,CAACH,WAAW;MAACc,IAAI,EAAET,KAAK,CAACS;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChCf,OAAA;MAAKS,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCV,OAAA;QAAAU,QAAA,EAAKN;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChBf,OAAA;QAAKS,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,GAAC,EAACR,KAAK,CAACc,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC1Df,OAAA;QAAQiB,OAAO,EAAGX,YAAc;QAAAI,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX,CAAC;AAAAZ,EAAA,CAvBKF,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AAyBjB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}